import text_preprocessing
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
import os
import pickle


def save_obj(obj, name):
    with open(name, 'wb') as handle:
          pickle.dump(obj, handle)


def learning_(file_path, nltk_clean=True, str_clean=True):
    """
    :param file_path:
    :param nltk_clean:
    :param str_clean:
    :return:
    """
    text_train, y, df = text_preprocessing.main(["-filepath", file_path,
                                                 "-ntlk_clean", nltk_clean,
                                                 "-str_clean", str_clean])
    # the the bag of word representation :
    vectorizer = TfidfVectorizer(max_df=0.8, min_df=3)
    X_train = vectorizer.fit_transform(text_train)
    features_names = vectorizer.get_feature_names()
    feature_names = np.asarray(features_names)
    rf = RandomForestClassifier(n_estimators=1000)
    rf.fit(X_train, y)
    directory = os.getcwd()
    save_obj(rf, os.path.join(directory, 'random_forest_classifier'))
    return rf, feature_names

